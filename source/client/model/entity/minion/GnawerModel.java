package net.tslat.aoa3.client.model.entity.minion;

import com.mojang.blaze3d.matrix.MatrixStack;
import com.mojang.blaze3d.vertex.IVertexBuilder;
import net.minecraft.client.renderer.entity.model.EntityModel;
import net.minecraft.client.renderer.model.ModelRenderer;
import net.minecraft.entity.MobEntity;
import net.minecraft.util.math.MathHelper;

public class GnawerModel extends EntityModel<MobEntity> {
	private final ModelRenderer head;
	private final ModelRenderer body;
	private final ModelRenderer rightArm;
	private final ModelRenderer leftArm;
	private final ModelRenderer rightLeg;
	private final ModelRenderer leftLeg;
	private final ModelRenderer body2;
	private final ModelRenderer head2;
	private final ModelRenderer head3;
	private final ModelRenderer head4;
	private final ModelRenderer head5;
	private final ModelRenderer head6;
	private final ModelRenderer head7;
	private final ModelRenderer head8;
	private final ModelRenderer head9;
	private final ModelRenderer head10;
	private final ModelRenderer head11;
	private final ModelRenderer head12;
	private final ModelRenderer head13;
	private final ModelRenderer head14;
	private final ModelRenderer head15;
	private final ModelRenderer head16;
	private final ModelRenderer head17;
	private final ModelRenderer head18;
	private final ModelRenderer head19;
	private final ModelRenderer rightArm2;
	private final ModelRenderer leftArm2;
	private final ModelRenderer leftLeg2;
	private final ModelRenderer rightLeg2;
	private final ModelRenderer leftLeg3;
	private final ModelRenderer rightLeg3;

	public GnawerModel() {
		texWidth = 64;
		texHeight = 64;
		(head = new ModelRenderer(this, 29, 0)).addBox(-4.0f, -6.0f, 1.0f, 8, 3, 3);
		head.setPos(0.0f, -7.0f, -4.0f);
		head.setTexSize(64, 64);
		head.mirror = true;
		setRotation(head, 0.3490659f, 0.0f, 0.0f);
		(body = new ModelRenderer(this, 28, 14)).addBox(-5.0f, 0.0f, -2.0f, 10, 12, 6);
		body.setPos(0.0f, -7.0f, -5.0f);
		body.setTexSize(64, 64);
		body.mirror = true;
		setRotation(body, 0.3490659f, 0.0f, 0.0f);
		(rightArm = new ModelRenderer(this, 19, 33)).addBox(-2.0f, 8.0f, -4.0f, 2, 8, 2);
		rightArm.setPos(-6.0f, -4.0f, -3.0f);
		rightArm.setTexSize(64, 64);
		rightArm.mirror = true;
		setRotation(rightArm, 0.0f, 0.0f, 0.0f);
		(leftArm = new ModelRenderer(this, 19, 33)).addBox(0.0f, 8.0f, -4.0f, 2, 8, 2);
		leftArm.setPos(6.0f, -4.0f, -3.0f);
		leftArm.setTexSize(64, 64);
		leftArm.mirror = true;
		setRotation(leftArm, 0.0f, 0.0f, 0.0f);
		(rightLeg = new ModelRenderer(this, 39, 7)).addBox(2.0f, 7.0f, -7.0f, 1, 2, 4);
		rightLeg.setPos(-4.0f, 15.0f, 0.0f);
		rightLeg.setTexSize(64, 64);
		rightLeg.mirror = true;
		setRotation(rightLeg, 0.0f, 0.0f, 0.0f);
		(leftLeg = new ModelRenderer(this, 39, 7)).addBox(2.0f, 7.0f, -7.0f, 1, 2, 4);
		leftLeg.setPos(4.0f, 15.0f, 0.0f);
		leftLeg.setTexSize(64, 64);
		leftLeg.mirror = true;
		setRotation(leftLeg, 0.0f, 0.0f, 0.0f);
		(body2 = new ModelRenderer(this, 31, 38)).addBox(-4.0f, 0.0f, -2.0f, 8, 12, 5);
		body2.setPos(0.0f, 3.0f, 0.0f);
		body2.setTexSize(64, 64);
		body2.mirror = true;
		setRotation(body2, 0.0f, 0.0f, 0.0f);
		(head2 = new ModelRenderer(this, 0, 50)).addBox(-4.0f, -9.0f, -6.0f, 8, 3, 10);
		head2.setPos(0.0f, -7.0f, -4.0f);
		head2.setTexSize(64, 64);
		head2.mirror = true;
		setRotation(head2, 0.3490659f, 0.0f, 0.0f);
		(head3 = new ModelRenderer(this, 0, 0)).addBox(3.0f, -6.0f, -2.0f, 1, 1, 1);
		head3.setPos(0.0f, -7.0f, -4.0f);
		head3.setTexSize(64, 64);
		head3.mirror = true;
		setRotation(head3, 0.3490659f, 0.0f, 0.0f);
		(head4 = new ModelRenderer(this, 0, 0)).addBox(-4.0f, -3.0f, -6.0f, 8, 3, 10);
		head4.setPos(0.0f, -7.0f, -4.0f);
		head4.setTexSize(64, 64);
		head4.mirror = true;
		setRotation(head4, 0.3490659f, 0.0f, 0.0f);
		(head5 = new ModelRenderer(this, 0, 0)).addBox(-4.0f, -6.0f, -2.0f, 1, 1, 1);
		head5.setPos(0.0f, -7.0f, -4.0f);
		head5.setTexSize(64, 64);
		head5.mirror = true;
		setRotation(head5, 0.3490659f, 0.0f, 0.0f);
		(head6 = new ModelRenderer(this, 0, 0)).addBox(1.0f, -6.0f, -6.0f, 1, 1, 1);
		head6.setPos(0.0f, -7.0f, -4.0f);
		head6.setTexSize(64, 64);
		head6.mirror = true;
		setRotation(head6, 0.3490659f, 0.0f, 0.0f);
		(head7 = new ModelRenderer(this, 0, 0)).addBox(-2.0f, -6.0f, -6.0f, 1, 1, 1);
		head7.setPos(0.0f, -7.0f, -4.0f);
		head7.setTexSize(64, 64);
		head7.mirror = true;
		setRotation(head7, 0.3490659f, 0.0f, 0.0f);
		(head8 = new ModelRenderer(this, 0, 0)).addBox(3.0f, -6.0f, -6.0f, 1, 1, 1);
		head8.setPos(0.0f, -7.0f, -4.0f);
		head8.setTexSize(64, 64);
		head8.mirror = true;
		setRotation(head8, 0.3490659f, 0.0f, 0.0f);
		(head9 = new ModelRenderer(this, 0, 0)).addBox(-4.0f, -6.0f, -6.0f, 1, 1, 1);
		head9.setPos(0.0f, -7.0f, -4.0f);
		head9.setTexSize(64, 64);
		head9.mirror = true;
		setRotation(head9, 0.3490659f, 0.0f, 0.0f);
		(head10 = new ModelRenderer(this, 0, 0)).addBox(3.0f, -6.0f, -4.0f, 1, 1, 1);
		head10.setPos(0.0f, -7.0f, -4.0f);
		head10.setTexSize(64, 64);
		head10.mirror = true;
		setRotation(head10, 0.3490659f, 0.0f, 0.0f);
		(head11 = new ModelRenderer(this, 0, 0)).addBox(-4.0f, -6.0f, -4.0f, 1, 1, 1);
		head11.setPos(0.0f, -7.0f, -4.0f);
		head11.setTexSize(64, 64);
		head11.mirror = true;
		setRotation(head11, 0.3490659f, 0.0f, 0.0f);
		(head12 = new ModelRenderer(this, 0, 0)).addBox(3.0f, -4.0f, -2.0f, 1, 1, 1);
		head12.setPos(0.0f, -7.0f, -4.0f);
		head12.setTexSize(64, 64);
		head12.mirror = true;
		setRotation(head12, 0.3490659f, 0.0f, 0.0f);
		(head13 = new ModelRenderer(this, 0, 0)).addBox(-4.0f, -4.0f, -2.0f, 1, 1, 1);
		head13.setPos(0.0f, -7.0f, -4.0f);
		head13.setTexSize(64, 64);
		head13.mirror = true;
		setRotation(head13, 0.3490659f, 0.0f, 0.0f);
		(head14 = new ModelRenderer(this, 0, 0)).addBox(3.0f, -4.0f, -4.0f, 1, 1, 1);
		head14.setPos(0.0f, -7.0f, -4.0f);
		head14.setTexSize(64, 64);
		head14.mirror = true;
		setRotation(head14, 0.3490659f, 0.0f, 0.0f);
		(head15 = new ModelRenderer(this, 0, 0)).addBox(-4.0f, -4.0f, -4.0f, 1, 1, 1);
		head15.setPos(0.0f, -7.0f, -4.0f);
		head15.setTexSize(64, 64);
		head15.mirror = true;
		setRotation(head15, 0.3490659f, 0.0f, 0.0f);
		(head16 = new ModelRenderer(this, 0, 0)).addBox(-4.0f, -4.0f, -6.0f, 1, 1, 1);
		head16.setPos(0.0f, -7.0f, -4.0f);
		head16.setTexSize(64, 64);
		head16.mirror = true;
		setRotation(head16, 0.3490659f, 0.0f, 0.0f);
		(head17 = new ModelRenderer(this, 0, 0)).addBox(-2.0f, -4.0f, -6.0f, 1, 1, 1);
		head17.setPos(0.0f, -7.0f, -4.0f);
		head17.setTexSize(64, 64);
		head17.mirror = true;
		setRotation(head17, 0.3490659f, 0.0f, 0.0f);
		(head18 = new ModelRenderer(this, 0, 0)).addBox(1.0f, -4.0f, -6.0f, 1, 1, 1);
		head18.setPos(0.0f, -7.0f, -4.0f);
		head18.setTexSize(64, 64);
		head18.mirror = true;
		setRotation(head18, 0.3490659f, 0.0f, 0.0f);
		(head19 = new ModelRenderer(this, 0, 0)).addBox(3.0f, -4.0f, -6.0f, 1, 1, 1);
		head19.setPos(0.0f, -7.0f, -4.0f);
		head19.setTexSize(64, 64);
		head19.mirror = true;
		setRotation(head19, 0.3490659f, 0.0f, 0.0f);
		(rightArm2 = new ModelRenderer(this, 1, 33)).addBox(-3.0f, -2.0f, -2.0f, 4, 12, 4);
		rightArm2.setPos(-6.0f, -4.0f, -3.0f);
		rightArm2.setTexSize(64, 64);
		rightArm2.mirror = true;
		setRotation(rightArm2, -0.3490659f, 0.0f, 0.0f);
		(leftArm2 = new ModelRenderer(this, 1, 33)).addBox(-1.0f, -2.0f, -2.0f, 4, 12, 4);
		leftArm2.setPos(6.0f, -4.0f, -3.0f);
		leftArm2.setTexSize(64, 64);
		leftArm2.mirror = true;
		setRotation(leftArm2, -0.3490659f, 0.0f, 0.0f);
		(leftLeg2 = new ModelRenderer(this, 0, 16)).addBox(-3.0f, 0.0f, -3.0f, 6, 9, 6);
		leftLeg2.setPos(4.0f, 15.0f, 0.0f);
		leftLeg2.setTexSize(64, 64);
		leftLeg2.mirror = true;
		setRotation(leftLeg2, 0.0f, 0.0f, 0.0f);
		(rightLeg2 = new ModelRenderer(this, 0, 16)).addBox(-3.0f, 0.0f, -3.0f, 6, 9, 6);
		rightLeg2.setPos(-4.0f, 15.0f, 0.0f);
		rightLeg2.setTexSize(64, 64);
		rightLeg2.mirror = true;
		setRotation(rightLeg2, 0.0f, 0.0f, 0.0f);
		(leftLeg3 = new ModelRenderer(this, 39, 7)).addBox(-3.0f, 7.0f, -7.0f, 1, 2, 4);
		leftLeg3.setPos(4.0f, 15.0f, 0.0f);
		leftLeg3.setTexSize(64, 64);
		leftLeg3.mirror = true;
		setRotation(leftLeg3, 0.0f, 0.0f, 0.0f);
		(rightLeg3 = new ModelRenderer(this, 39, 7)).addBox(-3.0f, 7.0f, -7.0f, 1, 2, 4);
		rightLeg3.setPos(-4.0f, 15.0f, 0.0f);
		rightLeg3.setTexSize(64, 64);
		rightLeg3.mirror = true;
		setRotation(rightLeg3, 0.0f, 0.0f, 0.0f);
	}

	public void renderToBuffer(MatrixStack matrix, IVertexBuilder buffer, int light, int overlay, float red, float green, float blue, float alpha) {
		head.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		body.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		rightArm.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		leftArm.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		rightLeg.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		leftLeg.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		body2.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		head2.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		head3.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		head4.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		head5.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		head6.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		head7.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		head8.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		head9.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		head10.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		head11.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		head12.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		head13.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		head14.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		head15.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		head16.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		head17.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		head18.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		head19.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		rightArm2.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		leftArm2.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		leftLeg2.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		rightLeg2.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		leftLeg3.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		rightLeg3.render(matrix, buffer, light, overlay, red, green, blue, alpha);
	}

	private void setRotation(final ModelRenderer model, final float x, final float y, final float z) {
		model.xRot = x;
		model.yRot = y;
		model.zRot = z;
	}

	public void setupAnim(MobEntity entityIn, float limbSwing, float limbSwingAmount, float ageInTicks, float netHeadYaw, float headPitch) {
		head.yRot = netHeadYaw / (float)(180f / Math.PI);
		head2.yRot = netHeadYaw / (float)(180f / Math.PI);
		head3.yRot = netHeadYaw / (float)(180f / Math.PI);
		head4.yRot = netHeadYaw / (float)(180f / Math.PI);
		head5.yRot = netHeadYaw / (float)(180f / Math.PI);
		head6.yRot = netHeadYaw / (float)(180f / Math.PI);
		head7.yRot = netHeadYaw / (float)(180f / Math.PI);
		head8.yRot = netHeadYaw / (float)(180f / Math.PI);
		head9.yRot = netHeadYaw / (float)(180f / Math.PI);
		head10.yRot = netHeadYaw / (float)(180f / Math.PI);
		head11.yRot = netHeadYaw / (float)(180f / Math.PI);
		head12.yRot = netHeadYaw / (float)(180f / Math.PI);
		head13.yRot = netHeadYaw / (float)(180f / Math.PI);
		head14.yRot = netHeadYaw / (float)(180f / Math.PI);
		head15.yRot = netHeadYaw / (float)(180f / Math.PI);
		head16.yRot = netHeadYaw / (float)(180f / Math.PI);
		head17.yRot = netHeadYaw / (float)(180f / Math.PI);
		head18.yRot = netHeadYaw / (float)(180f / Math.PI);
		head19.yRot = netHeadYaw / (float)(180f / Math.PI);
		rightArm.xRot = MathHelper.cos(limbSwing * 0.6662f + 3.1415927f) * 2.0f * limbSwingAmount * 0.5f;
		rightArm.zRot = 0.0f;
		rightArm2.xRot = MathHelper.cos(limbSwing * 0.6662f + 3.1415927f) * 2.0f * limbSwingAmount * 0.5f - 0.349f;
		rightArm2.zRot = 0.0f;
		leftArm.xRot = MathHelper.cos(limbSwing * 0.6662f) * 2.0f * limbSwingAmount * 0.5f;
		leftArm.zRot = 0.0f;
		leftArm2.xRot = MathHelper.cos(limbSwing * 0.6662f) * 2.0f * limbSwingAmount * 0.5f - 0.349f;
		leftArm2.zRot = 0.0f;
		rightLeg.xRot = MathHelper.cos(limbSwing * 0.6662f) * 1.4f * limbSwingAmount;
		rightLeg.yRot = 0.0f;
		rightLeg2.xRot = MathHelper.cos(limbSwing * 0.6662f) * 1.4f * limbSwingAmount;
		rightLeg2.yRot = 0.0f;
		rightLeg2.xRot = MathHelper.cos(limbSwing * 0.6662f) * 1.4f * limbSwingAmount;
		rightLeg2.yRot = 0.0f;
		leftLeg.xRot = MathHelper.cos(limbSwing * 0.6662f + 3.1415927f) * 1.4f * limbSwingAmount;
		leftLeg2.xRot = MathHelper.cos(limbSwing * 0.6662f + 3.1415927f) * 1.4f * limbSwingAmount;
		leftLeg2.xRot = MathHelper.cos(limbSwing * 0.6662f + 3.1415927f) * 1.4f * limbSwingAmount;
		leftLeg3.xRot = MathHelper.cos(limbSwing * 0.6662f + 3.1415927f) * 1.4f * limbSwingAmount;
		leftLeg3.yRot = 0.0f;
		rightLeg3.xRot = MathHelper.cos(limbSwing * 0.6662f) * 1.4f * limbSwingAmount;
		rightLeg3.yRot = 0.0f;
	}
}
