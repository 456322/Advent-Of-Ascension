package net.tslat.aoa3.client.model.entity.mob.overworld;

import com.mojang.blaze3d.matrix.MatrixStack;
import com.mojang.blaze3d.vertex.IVertexBuilder;
import net.minecraft.client.renderer.entity.model.EntityModel;
import net.minecraft.client.renderer.model.ModelRenderer;
import net.minecraft.entity.MobEntity;
import net.minecraft.util.math.MathHelper;

public class KingChargerModel extends EntityModel<MobEntity> {
	private final ModelRenderer head;
	private final ModelRenderer rightLeg;
	private final ModelRenderer leftLeg;
	private final ModelRenderer rightLeg2;
	private final ModelRenderer leftLeg2;
	private final ModelRenderer rightLeg3;
	private final ModelRenderer leftLeg3;
	private final ModelRenderer rightLeg4;
	private final ModelRenderer leftLeg4;
	private final ModelRenderer head2;
	private final ModelRenderer head3;
	private final ModelRenderer head4;
	private final ModelRenderer head5;
	private final ModelRenderer head6;
	private final ModelRenderer head7;
	private final ModelRenderer head8;
	private final ModelRenderer head9;
	private final ModelRenderer head10;
	private final ModelRenderer head11;
	private final ModelRenderer head12;
	private final ModelRenderer head13;
	private final ModelRenderer head14;
	private final ModelRenderer head15;
	private final ModelRenderer head16;
	private final ModelRenderer head17;
	private final ModelRenderer head18;
	private final ModelRenderer head19;
	private final ModelRenderer head20;
	private final ModelRenderer head21;
	private final ModelRenderer head22;
	private final ModelRenderer head23;
	private final ModelRenderer head24;
	private final ModelRenderer head25;

	public KingChargerModel() {
		texWidth = 64;
		texHeight = 32;
		(head = new ModelRenderer(this, 37, 0)).addBox(-2.0f, -7.0f, -6.0f, 4, 1, 2);
		head.setPos(0.0f, 10.0f, 0.0f);
		head.setTexSize(64, 32);
		head.mirror = true;
		setRotation(head, 0.0f, 0.0f, 0.0f);
		(rightLeg = new ModelRenderer(this, 0, 16)).addBox(-2.0f, 0.0f, -2.0f, 4, 3, 4);
		rightLeg.setPos(-3.0f, 9.0f, 0.0f);
		rightLeg.setTexSize(64, 32);
		rightLeg.mirror = true;
		setRotation(rightLeg, 0.0f, 0.0f, 0.0f);
		(leftLeg = new ModelRenderer(this, 0, 16)).addBox(-2.0f, 0.0f, -2.0f, 4, 3, 4);
		leftLeg.setPos(3.0f, 9.0f, 0.0f);
		leftLeg.setTexSize(64, 32);
		leftLeg.mirror = true;
		setRotation(leftLeg, 0.0f, 0.0f, 0.0f);
		(rightLeg2 = new ModelRenderer(this, 18, 24)).addBox(1.0f, 13.0f, -5.0f, 1, 2, 6);
		rightLeg2.setPos(-3.0f, 9.0f, 0.0f);
		rightLeg2.setTexSize(64, 32);
		rightLeg2.mirror = true;
		setRotation(rightLeg2, 0.0f, 0.0f, 0.0f);
		(leftLeg2 = new ModelRenderer(this, 18, 24)).addBox(1.0f, 13.0f, -5.0f, 1, 2, 6);
		leftLeg2.setPos(3.0f, 9.0f, 0.0f);
		leftLeg2.setTexSize(64, 32);
		leftLeg2.mirror = true;
		setRotation(leftLeg2, 0.0f, 0.0f, 0.0f);
		(rightLeg3 = new ModelRenderer(this, 33, 16)).addBox(-1.0f, 3.0f, -1.0f, 2, 12, 2);
		rightLeg3.setPos(-3.0f, 9.0f, 0.0f);
		rightLeg3.setTexSize(64, 32);
		rightLeg3.mirror = true;
		setRotation(rightLeg3, 0.0f, 0.0f, 0.0f);
		(leftLeg3 = new ModelRenderer(this, 33, 16)).addBox(-1.0f, 3.0f, -1.0f, 2, 12, 2);
		leftLeg3.setPos(3.0f, 9.0f, 0.0f);
		leftLeg3.setTexSize(64, 32);
		leftLeg3.mirror = true;
		setRotation(leftLeg3, 0.0f, 0.0f, 0.0f);
		(rightLeg4 = new ModelRenderer(this, 18, 24)).addBox(-2.0f, 13.0f, -5.0f, 1, 2, 6);
		rightLeg4.setPos(-3.0f, 9.0f, 0.0f);
		rightLeg4.setTexSize(64, 32);
		rightLeg4.mirror = true;
		setRotation(rightLeg4, 0.0f, 0.0f, 0.0f);
		(leftLeg4 = new ModelRenderer(this, 18, 24)).addBox(-2.0f, 13.0f, -5.0f, 1, 2, 6);
		leftLeg4.setPos(3.0f, 9.0f, 0.0f);
		leftLeg4.setTexSize(64, 32);
		leftLeg4.mirror = true;
		setRotation(leftLeg4, 0.0f, 0.0f, 0.0f);
		(head2 = new ModelRenderer(this, 16, 4)).addBox(4.0f, -7.0f, -3.0f, 1, 6, 6);
		head2.setPos(0.0f, 9.0f, 0.0f);
		head2.setTexSize(64, 32);
		head2.mirror = true;
		setRotation(head2, 0.0f, 0.0f, 0.0f);
		(head3 = new ModelRenderer(this, 37, 0)).addBox(-3.0f, -5.0f, -6.0f, 6, 2, 2);
		head3.setPos(0.0f, 9.0f, 0.0f);
		head3.setTexSize(64, 32);
		head3.mirror = true;
		setRotation(head3, 0.0f, 0.0f, 0.0f);
		(head4 = new ModelRenderer(this, 37, 0)).addBox(-2.0f, -5.0f, -7.0f, 4, 2, 1);
		head4.setPos(0.0f, 9.0f, 0.0f);
		head4.setTexSize(64, 32);
		head4.mirror = true;
		setRotation(head4, 0.0f, 0.0f, 0.0f);
		(head5 = new ModelRenderer(this, 37, 0)).addBox(-2.0f, -3.0f, -6.0f, 4, 1, 2);
		head5.setPos(0.0f, 9.0f, 0.0f);
		head5.setTexSize(64, 32);
		head5.mirror = true;
		setRotation(head5, 0.0f, 0.0f, 0.0f);
		(head6 = new ModelRenderer(this, 42, 22)).addBox(4.0f, -11.0f, -1.0f, 1, 1, 2);
		head6.setPos(0.0f, 9.0f, 0.0f);
		head6.setTexSize(64, 32);
		head6.mirror = true;
		setRotation(head6, 0.0f, 0.0f, 0.0f);
		(head7 = new ModelRenderer(this, 16, 4)).addBox(-5.0f, -7.0f, -3.0f, 1, 6, 6);
		head7.setPos(0.0f, 9.0f, 0.0f);
		head7.setTexSize(64, 32);
		head7.mirror = true;
		setRotation(head7, 0.0f, 0.0f, 0.0f);
		(head8 = new ModelRenderer(this, 45, 14)).addBox(-3.0f, -7.0f, 4.0f, 6, 6, 1);
		head8.setPos(0.0f, 9.0f, 0.0f);
		head8.setTexSize(64, 32);
		head8.mirror = true;
		setRotation(head8, 0.0f, 0.0f, 0.0f);
		(head9 = new ModelRenderer(this, 0, 0)).addBox(-4.0f, -8.0f, -4.0f, 8, 8, 8);
		head9.setPos(0.0f, 9.0f, 0.0f);
		head9.setTexSize(64, 32);
		head9.mirror = true;
		setRotation(head9, 0.0f, 0.0f, 0.0f);
		(head10 = new ModelRenderer(this, 38, 7)).addBox(-3.0f, -9.0f, -3.0f, 6, 1, 6);
		head10.setPos(0.0f, 9.0f, 0.0f);
		head10.setTexSize(64, 32);
		head10.mirror = true;
		setRotation(head10, 0.0f, 0.0f, 0.0f);
		(head11 = new ModelRenderer(this, 42, 22)).addBox(-1.0f, -11.0f, -5.0f, 2, 1, 1);
		head11.setPos(0.0f, 9.0f, 0.0f);
		head11.setTexSize(64, 32);
		head11.mirror = true;
		setRotation(head11, 0.0f, 0.0f, 0.0f);
		(head12 = new ModelRenderer(this, 42, 22)).addBox(-1.0f, -11.0f, 4.0f, 2, 1, 1);
		head12.setPos(0.0f, 9.0f, 0.0f);
		head12.setTexSize(64, 32);
		head12.mirror = true;
		setRotation(head12, 0.0f, 0.0f, 0.0f);
		(head13 = new ModelRenderer(this, 42, 22)).addBox(-5.0f, -11.0f, -1.0f, 1, 1, 2);
		head13.setPos(0.0f, 9.0f, 0.0f);
		head13.setTexSize(64, 32);
		head13.mirror = true;
		setRotation(head13, 0.0f, 0.0f, 0.0f);
		(head14 = new ModelRenderer(this, 42, 22)).addBox(-5.0f, -10.0f, 4.0f, 10, 2, 1);
		head14.setPos(0.0f, 9.0f, 0.0f);
		head14.setTexSize(64, 32);
		head14.mirror = true;
		setRotation(head14, 0.0f, 0.0f, 0.0f);
		(head15 = new ModelRenderer(this, 42, 22)).addBox(-5.0f, -10.0f, -5.0f, 10, 2, 1);
		head15.setPos(0.0f, 9.0f, 0.0f);
		head15.setTexSize(64, 32);
		head15.mirror = true;
		setRotation(head15, 0.0f, 0.0f, 0.0f);
		(head16 = new ModelRenderer(this, 42, 22)).addBox(-4.0f, -11.0f, 4.0f, 2, 1, 1);
		head16.setPos(0.0f, 9.0f, 0.0f);
		head16.setTexSize(64, 32);
		head16.mirror = true;
		setRotation(head16, 0.0f, 0.0f, 0.0f);
		(head17 = new ModelRenderer(this, 42, 22)).addBox(-4.0f, -11.0f, -5.0f, 2, 1, 1);
		head17.setPos(0.0f, 9.0f, 0.0f);
		head17.setTexSize(64, 32);
		head17.mirror = true;
		setRotation(head17, 0.0f, 0.0f, 0.0f);
		(head18 = new ModelRenderer(this, 42, 22)).addBox(2.0f, -11.0f, 4.0f, 2, 1, 1);
		head18.setPos(0.0f, 9.0f, 0.0f);
		head18.setTexSize(64, 32);
		head18.mirror = true;
		setRotation(head18, 0.0f, 0.0f, 0.0f);
		(head19 = new ModelRenderer(this, 42, 22)).addBox(2.0f, -11.0f, -5.0f, 2, 1, 1);
		head19.setPos(0.0f, 9.0f, 0.0f);
		head19.setTexSize(64, 32);
		head19.mirror = true;
		setRotation(head19, 0.0f, 0.0f, 0.0f);
		(head20 = new ModelRenderer(this, 42, 22)).addBox(4.0f, -10.0f, -4.0f, 1, 2, 8);
		head20.setPos(0.0f, 9.0f, 0.0f);
		head20.setTexSize(64, 32);
		head20.mirror = true;
		setRotation(head20, 0.0f, 0.0f, 0.0f);
		(head21 = new ModelRenderer(this, 42, 22)).addBox(-5.0f, -10.0f, -4.0f, 1, 2, 8);
		head21.setPos(0.0f, 9.0f, 0.0f);
		head21.setTexSize(64, 32);
		head21.mirror = true;
		setRotation(head21, 0.0f, 0.0f, 0.0f);
		(head22 = new ModelRenderer(this, 42, 22)).addBox(4.0f, -11.0f, -4.0f, 1, 1, 2);
		head22.setPos(0.0f, 9.0f, 0.0f);
		head22.setTexSize(64, 32);
		head22.mirror = true;
		setRotation(head22, 0.0f, 0.0f, 0.0f);
		(head23 = new ModelRenderer(this, 42, 22)).addBox(-5.0f, -11.0f, -4.0f, 1, 1, 2);
		head23.setPos(0.0f, 9.0f, 0.0f);
		head23.setTexSize(64, 32);
		head23.mirror = true;
		setRotation(head23, 0.0f, 0.0f, 0.0f);
		(head24 = new ModelRenderer(this, 42, 22)).addBox(4.0f, -11.0f, 2.0f, 1, 1, 2);
		head24.setPos(0.0f, 9.0f, 0.0f);
		head24.setTexSize(64, 32);
		head24.mirror = true;
		setRotation(head24, 0.0f, 0.0f, 0.0f);
		(head25 = new ModelRenderer(this, 42, 22)).addBox(-5.0f, -11.0f, 2.0f, 1, 1, 2);
		head25.setPos(0.0f, 9.0f, 0.0f);
		head25.setTexSize(64, 32);
		head25.mirror = true;
		setRotation(head25, 0.0f, 0.0f, 0.0f);
	}

	@Override
	public void setupAnim(MobEntity entityIn, float limbSwing, float limbSwingAmount, float ageInTicks, float netHeadYaw, float headPitch) {
		rightLeg.xRot = MathHelper.cos(limbSwing * 0.6662f) * 1.4f * limbSwingAmount;
		rightLeg.yRot = 0.0f;
		rightLeg2.xRot = MathHelper.cos(limbSwing * 0.6662f) * 1.4f * limbSwingAmount;
		rightLeg2.yRot = 0.0f;
		rightLeg3.xRot = MathHelper.cos(limbSwing * 0.6662f) * 1.4f * limbSwingAmount;
		rightLeg3.yRot = 0.0f;
		rightLeg4.xRot = MathHelper.cos(limbSwing * 0.6662f) * 1.4f * limbSwingAmount;
		rightLeg4.yRot = 0.0f;
		leftLeg.xRot = MathHelper.cos(limbSwing * 0.6662f + 3.1415927f) * 1.4f * limbSwingAmount;
		leftLeg2.xRot = MathHelper.cos(limbSwing * 0.6662f + 3.1415927f) * 1.4f * limbSwingAmount;
		leftLeg3.xRot = MathHelper.cos(limbSwing * 0.6662f + 3.1415927f) * 1.4f * limbSwingAmount;
		leftLeg4.xRot = MathHelper.cos(limbSwing * 0.6662f + 3.1415927f) * 1.4f * limbSwingAmount;
	}

	@Override
	public void renderToBuffer(MatrixStack matrix, IVertexBuilder buffer, int light, int overlay, float red, float green, float blue, float alpha) {
		head.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		rightLeg.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		leftLeg.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		rightLeg2.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		leftLeg2.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		rightLeg3.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		leftLeg3.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		rightLeg4.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		leftLeg4.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		head2.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		head3.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		head4.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		head5.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		head6.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		head7.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		head8.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		head9.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		head10.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		head11.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		head12.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		head13.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		head14.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		head15.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		head16.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		head17.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		head18.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		head19.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		head20.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		head21.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		head22.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		head23.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		head24.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		head25.render(matrix, buffer, light, overlay, red, green, blue, alpha);
	}

	private void setRotation(final ModelRenderer model, final float x, final float y, final float z) {
		model.xRot = x;
		model.yRot = y;
		model.zRot = z;
	}
}
