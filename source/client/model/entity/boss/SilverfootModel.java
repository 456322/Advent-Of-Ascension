package net.tslat.aoa3.client.model.entity.boss;

import com.mojang.blaze3d.matrix.MatrixStack;
import com.mojang.blaze3d.vertex.IVertexBuilder;
import net.minecraft.client.renderer.entity.model.EntityModel;
import net.minecraft.client.renderer.model.ModelRenderer;
import net.minecraft.entity.MobEntity;
import net.minecraft.util.math.MathHelper;

public class SilverfootModel extends EntityModel<MobEntity> {
	private final ModelRenderer head;
	private final ModelRenderer body;
	private final ModelRenderer rightArm11;
	private final ModelRenderer rightLeg;
	private final ModelRenderer leftLeg;
	private final ModelRenderer head2;
	private final ModelRenderer head3;
	private final ModelRenderer head4;
	private final ModelRenderer head5;
	private final ModelRenderer head6;
	private final ModelRenderer head7;
	private final ModelRenderer head8;
	private final ModelRenderer head9;
	private final ModelRenderer head10;
	private final ModelRenderer head11;
	private final ModelRenderer head12;
	private final ModelRenderer leftArm2;
	private final ModelRenderer rightArm10;
	private final ModelRenderer rightArm8;
	private final ModelRenderer rightArm9;
	private final ModelRenderer leftArm6;
	private final ModelRenderer leftArm7;
	private final ModelRenderer leftArm8;
	private final ModelRenderer leftArm9;
	private final ModelRenderer connect;
	private final ModelRenderer rightArm;
	private final ModelRenderer connect2;
	private final ModelRenderer rightArm2;
	private final ModelRenderer leftArm10;
	private final ModelRenderer rightArm3;
	private final ModelRenderer leftArm11;
	private final ModelRenderer rightArm4;
	private final ModelRenderer rightArm5;
	private final ModelRenderer leftArm12;
	private final ModelRenderer leftArm13;
	private final ModelRenderer leftArm14;
	private final ModelRenderer rightArm6;
	private final ModelRenderer leftArm15;
	private final ModelRenderer rightArm7;
	private final ModelRenderer head13;
	private final ModelRenderer head14;

	public SilverfootModel() {
		textureWidth = 128;
		textureHeight = 64;
		(head = new ModelRenderer(this, 50, 0)).addBox(-6.0f, 4.0f, -7.0f, 12, 4, 1);
		head.setRotationPoint(0.0f, -6.0f, 5.0f);
		head.setTextureSize(128, 64);
		head.mirror = true;
		setRotation(head, 0.0f, 0.0f, 0.0f);
		(body = new ModelRenderer(this, 78, 1)).addBox(-9.0f, 0.0f, -2.0f, 18, 20, 6);
		body.setRotationPoint(0.0f, -9.0f, 7.0f);
		body.setTextureSize(128, 64);
		body.mirror = true;
		setRotation(body, 0.0f, 0.0f, 0.0f);
		(rightArm11 = new ModelRenderer(this, 40, 16)).addBox(-8.0f, -8.0f, -1.0f, 2, 4, 2);
		rightArm11.setRotationPoint(-10.0f, -6.0f, 8.0f);
		rightArm11.setTextureSize(128, 64);
		rightArm11.mirror = true;
		setRotation(rightArm11, 0.0f, 0.0f, 0.0f);
		(rightLeg = new ModelRenderer(this, 0, 16)).addBox(-3.0f, 0.0f, -3.0f, 6, 13, 6);
		rightLeg.setRotationPoint(-6.0f, 11.0f, 8.0f);
		rightLeg.setTextureSize(128, 64);
		rightLeg.mirror = true;
		setRotation(rightLeg, 0.0f, 0.0f, 0.0f);
		(leftLeg = new ModelRenderer(this, 0, 16)).addBox(-3.0f, 0.0f, -3.0f, 6, 13, 6);
		leftLeg.setRotationPoint(6.0f, 11.0f, 8.0f);
		leftLeg.setTextureSize(128, 64);
		leftLeg.mirror = true;
		setRotation(leftLeg, 0.0f, 0.0f, 0.0f);
		(head2 = new ModelRenderer(this, 0, 0)).addBox(-5.0f, -5.0f, -6.0f, 10, 10, 6);
		head2.setRotationPoint(0.0f, -6.0f, 5.0f);
		head2.setTextureSize(128, 64);
		head2.mirror = true;
		setRotation(head2, 0.0f, 0.0f, 0.0f);
		(head3 = new ModelRenderer(this, 50, 0)).addBox(-6.0f, -1.0f, -7.0f, 12, 2, 1);
		head3.setRotationPoint(0.0f, -6.0f, 5.0f);
		head3.setTextureSize(128, 64);
		head3.mirror = true;
		setRotation(head3, 0.0f, 0.0f, 0.0f);
		(head4 = new ModelRenderer(this, 62, 7)).addBox(-2.0f, -13.0f, -7.0f, 4, 6, 1);
		head4.setRotationPoint(0.0f, -6.0f, 5.0f);
		head4.setTextureSize(128, 64);
		head4.mirror = true;
		setRotation(head4, 0.0f, 0.0f, 0.0f);
		(head5 = new ModelRenderer(this, 35, 0)).addBox(-2.0f, -3.0f, -7.0f, 4, 2, 1);
		head5.setRotationPoint(0.0f, -6.0f, 5.0f);
		head5.setTextureSize(128, 64);
		head5.mirror = true;
		setRotation(head5, 0.0f, 0.0f, 0.0f);
		(head6 = new ModelRenderer(this, 35, 0)).addBox(-6.0f, 1.0f, -7.0f, 2, 3, 1);
		head6.setRotationPoint(0.0f, -6.0f, 5.0f);
		head6.setTextureSize(128, 64);
		head6.mirror = true;
		setRotation(head6, 0.0f, 0.0f, 0.0f);
		(head7 = new ModelRenderer(this, 35, 0)).addBox(-6.0f, -3.0f, -7.0f, 2, 2, 1);
		head7.setRotationPoint(0.0f, -6.0f, 5.0f);
		head7.setTextureSize(128, 64);
		head7.mirror = true;
		setRotation(head7, 0.0f, 0.0f, 0.0f);
		(head8 = new ModelRenderer(this, 35, 0)).addBox(4.0f, 1.0f, -7.0f, 2, 3, 1);
		head8.setRotationPoint(0.0f, -6.0f, 5.0f);
		head8.setTextureSize(128, 64);
		head8.mirror = true;
		setRotation(head8, 0.0f, 0.0f, 0.0f);
		(head9 = new ModelRenderer(this, 35, 0)).addBox(4.0f, -3.0f, -7.0f, 2, 2, 1);
		head9.setRotationPoint(0.0f, -6.0f, 5.0f);
		head9.setTextureSize(128, 64);
		head9.mirror = true;
		setRotation(head9, 0.0f, 0.0f, 0.0f);
		(head10 = new ModelRenderer(this, 50, 0)).addBox(2.0f, -3.0f, -7.0f, 1, 1, 1);
		head10.setRotationPoint(0.0f, -6.0f, 5.0f);
		head10.setTextureSize(128, 64);
		head10.mirror = true;
		setRotation(head10, 0.0f, 0.0f, 0.0f);
		(head11 = new ModelRenderer(this, 50, 7)).addBox(-6.0f, -11.0f, -7.0f, 3, 4, 1);
		head11.setRotationPoint(0.0f, -6.0f, 5.0f);
		head11.setTextureSize(128, 64);
		head11.mirror = true;
		setRotation(head11, 0.0f, 0.0f, 0.0f);
		(head12 = new ModelRenderer(this, 50, 7)).addBox(3.0f, -11.0f, -7.0f, 3, 4, 1);
		head12.setRotationPoint(0.0f, -6.0f, 5.0f);
		head12.setTextureSize(128, 64);
		head12.mirror = true;
		setRotation(head12, 0.0f, 0.0f, 0.0f);
		(leftArm2 = new ModelRenderer(this, 63, 45)).addBox(-1.0f, 9.0f, -26.0f, 8, 8, 2);
		leftArm2.setRotationPoint(10.0f, -6.0f, 8.0f);
		leftArm2.setTextureSize(128, 64);
		leftArm2.mirror = true;
		setRotation(leftArm2, 0.0f, 0.0f, 0.0f);
		(rightArm10 = new ModelRenderer(this, 13, 38)).addBox(-8.0f, -4.0f, -5.0f, 2, 16, 10);
		rightArm10.setRotationPoint(-10.0f, -6.0f, 8.0f);
		rightArm10.setTextureSize(128, 64);
		rightArm10.mirror = true;
		setRotation(rightArm10, 0.0f, 0.0f, 0.0f);
		(rightArm8 = new ModelRenderer(this, 40, 26)).addBox(-8.0f, -6.0f, -5.0f, 2, 2, 2);
		rightArm8.setRotationPoint(-10.0f, -6.0f, 8.0f);
		rightArm8.setTextureSize(128, 64);
		rightArm8.mirror = true;
		setRotation(rightArm8, 0.0f, 0.0f, 0.0f);
		(rightArm9 = new ModelRenderer(this, 40, 26)).addBox(-8.0f, -6.0f, 3.0f, 2, 2, 2);
		rightArm9.setRotationPoint(-10.0f, -6.0f, 8.0f);
		rightArm9.setTextureSize(128, 64);
		rightArm9.mirror = true;
		setRotation(rightArm9, 0.0f, 0.0f, 0.0f);
		(leftArm6 = new ModelRenderer(this, 40, 16)).addBox(6.0f, -8.0f, -1.0f, 2, 4, 2);
		leftArm6.setRotationPoint(10.0f, -6.0f, 8.0f);
		leftArm6.setTextureSize(128, 64);
		leftArm6.mirror = true;
		setRotation(leftArm6, 0.0f, 0.0f, 0.0f);
		(leftArm7 = new ModelRenderer(this, 40, 26)).addBox(6.0f, -6.0f, -5.0f, 2, 2, 2);
		leftArm7.setRotationPoint(10.0f, -6.0f, 8.0f);
		leftArm7.setTextureSize(128, 64);
		leftArm7.mirror = true;
		setRotation(leftArm7, 0.0f, 0.0f, 0.0f);
		(leftArm8 = new ModelRenderer(this, 40, 26)).addBox(6.0f, -6.0f, 3.0f, 2, 2, 2);
		leftArm8.setRotationPoint(10.0f, -6.0f, 8.0f);
		leftArm8.setTextureSize(128, 64);
		leftArm8.mirror = true;
		setRotation(leftArm8, 0.0f, 0.0f, 0.0f);
		(leftArm9 = new ModelRenderer(this, 38, 38)).addBox(6.0f, -4.0f, -5.0f, 2, 16, 10);
		leftArm9.setRotationPoint(10.0f, -6.0f, 8.0f);
		leftArm9.setTextureSize(128, 64);
		leftArm9.mirror = true;
		setRotation(leftArm9, 0.0f, 0.0f, 0.0f);
		(connect = new ModelRenderer(this, 81, 29)).addBox(-6.0f, -2.0f, -2.0f, 5, 4, 3);
		connect.setRotationPoint(12.0f, -4.0f, 8.0f);
		connect.setTextureSize(128, 64);
		connect.mirror = true;
		setRotation(connect, 0.0f, 0.0f, 0.5235988f);
		(rightArm = new ModelRenderer(this, 63, 45)).addBox(-7.0f, 9.0f, -26.0f, 8, 8, 2);
		rightArm.setRotationPoint(-10.0f, -6.0f, 7.0f);
		rightArm.setTextureSize(128, 64);
		rightArm.mirror = true;
		setRotation(rightArm, 0.0f, 0.0f, 0.0f);
		(connect2 = new ModelRenderer(this, 81, 29)).addBox(-6.0f, -2.0f, -2.0f, 5, 4, 3);
		connect2.setRotationPoint(-7.0f, -7.0f, 8.0f);
		connect2.setTextureSize(128, 64);
		connect2.mirror = true;
		setRotation(connect2, 0.0f, 0.0f, -0.5235988f);
		(rightArm2 = new ModelRenderer(this, 102, 30)).addBox(-6.0f, -2.0f, -3.0f, 6, 18, 6);
		rightArm2.setRotationPoint(-10.0f, -6.0f, 7.0f);
		rightArm2.setTextureSize(128, 64);
		rightArm2.mirror = true;
		setRotation(rightArm2, 0.0f, 0.0f, 0.0f);
		(leftArm10 = new ModelRenderer(this, 102, 30)).addBox(0.0f, -2.0f, -3.0f, 6, 18, 6);
		leftArm10.setRotationPoint(10.0f, -6.0f, 8.0f);
		leftArm10.setTextureSize(128, 64);
		leftArm10.mirror = true;
		setRotation(leftArm10, 0.0f, 0.0f, 0.0f);
		(rightArm3 = new ModelRenderer(this, 63, 45)).addBox(-5.0f, 11.0f, -16.0f, 4, 4, 14);
		rightArm3.setRotationPoint(-10.0f, -6.0f, 7.0f);
		rightArm3.setTextureSize(128, 64);
		rightArm3.mirror = true;
		setRotation(rightArm3, 0.0f, 0.0f, 0.0f);
		(leftArm11 = new ModelRenderer(this, 63, 45)).addBox(1.0f, 11.0f, -16.0f, 4, 4, 14);
		leftArm11.setRotationPoint(10.0f, -6.0f, 8.0f);
		leftArm11.setTextureSize(128, 64);
		leftArm11.mirror = true;
		setRotation(leftArm11, 0.0f, 0.0f, 0.0f);
		(rightArm4 = new ModelRenderer(this, 63, 53)).addBox(-5.0f, 11.0f, -24.0f, 4, 4, 2);
		rightArm4.setRotationPoint(-10.0f, -6.0f, 7.0f);
		rightArm4.setTextureSize(128, 64);
		rightArm4.mirror = true;
		setRotation(rightArm4, 0.0f, 0.0f, 0.0f);
		(rightArm5 = new ModelRenderer(this, 63, 45)).addBox(-7.0f, 9.0f, -22.0f, 8, 8, 2);
		rightArm5.setRotationPoint(-10.0f, -6.0f, 7.0f);
		rightArm5.setTextureSize(128, 64);
		rightArm5.mirror = true;
		setRotation(rightArm5, 0.0f, 0.0f, 0.0f);
		(leftArm12 = new ModelRenderer(this, 63, 45)).addBox(-1.0f, 9.0f, -22.0f, 8, 8, 2);
		leftArm12.setRotationPoint(10.0f, -6.0f, 8.0f);
		leftArm12.setTextureSize(128, 64);
		leftArm12.mirror = true;
		setRotation(leftArm12, 0.0f, 0.0f, 0.0f);
		(leftArm13 = new ModelRenderer(this, 63, 53)).addBox(1.0f, 11.0f, -24.0f, 4, 4, 2);
		leftArm13.setRotationPoint(10.0f, -6.0f, 8.0f);
		leftArm13.setTextureSize(128, 64);
		leftArm13.mirror = true;
		setRotation(leftArm13, 0.0f, 0.0f, 0.0f);
		(leftArm14 = new ModelRenderer(this, 63, 45)).addBox(-1.0f, 9.0f, -18.0f, 8, 8, 2);
		leftArm14.setRotationPoint(10.0f, -6.0f, 8.0f);
		leftArm14.setTextureSize(128, 64);
		leftArm14.mirror = true;
		setRotation(leftArm14, 0.0f, 0.0f, 0.0f);
		(rightArm6 = new ModelRenderer(this, 63, 45)).addBox(-7.0f, 9.0f, -18.0f, 8, 8, 2);
		rightArm6.setRotationPoint(-10.0f, -6.0f, 7.0f);
		rightArm6.setTextureSize(128, 64);
		rightArm6.mirror = true;
		setRotation(rightArm6, 0.0f, 0.0f, 0.0f);
		(leftArm15 = new ModelRenderer(this, 63, 53)).addBox(1.0f, 11.0f, -20.0f, 4, 4, 2);
		leftArm15.setRotationPoint(10.0f, -6.0f, 8.0f);
		leftArm15.setTextureSize(128, 64);
		leftArm15.mirror = true;
		setRotation(leftArm15, 0.0f, 0.0f, 0.0f);
		(rightArm7 = new ModelRenderer(this, 63, 53)).addBox(-5.0f, 11.0f, -20.0f, 4, 4, 2);
		rightArm7.setRotationPoint(-10.0f, -6.0f, 7.0f);
		rightArm7.setTextureSize(128, 64);
		rightArm7.mirror = true;
		setRotation(rightArm7, 0.0f, 0.0f, 0.0f);
		(head13 = new ModelRenderer(this, 50, 0)).addBox(-6.0f, -7.0f, -7.0f, 12, 4, 1);
		head13.setRotationPoint(0.0f, -6.0f, 5.0f);
		head13.setTextureSize(128, 64);
		head13.mirror = true;
		setRotation(head13, 0.0f, 0.0f, 0.0f);
		(head14 = new ModelRenderer(this, 50, 0)).addBox(-3.0f, -3.0f, -7.0f, 1, 1, 1);
		head14.setRotationPoint(0.0f, -6.0f, 5.0f);
		head14.setTextureSize(128, 64);
		head14.mirror = true;
		setRotation(head14, 0.0f, 0.0f, 0.0f);
	}

	@Override
	public void render(MatrixStack matrix, IVertexBuilder buffer, int light, int overlay, float red, float green, float blue, float alpha) {
		head.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		body.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		rightArm11.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		rightLeg.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		leftLeg.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		head2.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		head3.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		head4.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		head5.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		head6.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		head7.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		head8.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		head9.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		head10.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		head11.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		head12.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		leftArm2.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		rightArm10.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		rightArm8.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		rightArm9.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		leftArm6.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		leftArm7.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		leftArm8.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		leftArm9.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		connect.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		rightArm.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		connect2.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		rightArm2.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		leftArm10.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		rightArm3.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		leftArm11.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		rightArm4.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		rightArm5.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		leftArm12.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		leftArm13.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		leftArm14.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		rightArm6.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		leftArm15.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		rightArm7.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		head13.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		head14.render(matrix, buffer, light, overlay, red, green, blue, alpha);
	}

	private void setRotation(final ModelRenderer model, final float x, final float y, final float z) {
		model.rotateAngleX = x;
		model.rotateAngleY = y;
		model.rotateAngleZ = z;
	}

	@Override
	public void setRotationAngles(MobEntity entityIn, float limbSwing, float limbSwingAmount, float ageInTicks, float netHeadYaw, float headPitch) {
		rightArm.rotateAngleX = MathHelper.cos(limbSwing * 0.6662f + 3.1415927f) * 2.0f * limbSwingAmount * 0.5f;
		rightArm.rotateAngleZ = 0.0f;
		rightArm2.rotateAngleX = MathHelper.cos(limbSwing * 0.6662f + 3.1415927f) * 2.0f * limbSwingAmount * 0.5f;
		rightArm2.rotateAngleZ = 0.0f;
		rightArm3.rotateAngleX = MathHelper.cos(limbSwing * 0.6662f + 3.1415927f) * 2.0f * limbSwingAmount * 0.5f;
		rightArm3.rotateAngleZ = 0.0f;
		rightArm4.rotateAngleX = MathHelper.cos(limbSwing * 0.6662f + 3.1415927f) * 2.0f * limbSwingAmount * 0.5f;
		rightArm4.rotateAngleZ = 0.0f;
		rightArm5.rotateAngleX = MathHelper.cos(limbSwing * 0.6662f + 3.1415927f) * 2.0f * limbSwingAmount * 0.5f;
		rightArm5.rotateAngleZ = 0.0f;
		rightArm6.rotateAngleX = MathHelper.cos(limbSwing * 0.6662f + 3.1415927f) * 2.0f * limbSwingAmount * 0.5f;
		rightArm6.rotateAngleZ = 0.0f;
		rightArm7.rotateAngleX = MathHelper.cos(limbSwing * 0.6662f + 3.1415927f) * 2.0f * limbSwingAmount * 0.5f;
		rightArm7.rotateAngleZ = 0.0f;
		rightArm8.rotateAngleX = MathHelper.cos(limbSwing * 0.6662f + 3.1415927f) * 2.0f * limbSwingAmount * 0.5f;
		rightArm8.rotateAngleZ = 0.0f;
		rightArm9.rotateAngleX = MathHelper.cos(limbSwing * 0.6662f + 3.1415927f) * 2.0f * limbSwingAmount * 0.5f;
		rightArm9.rotateAngleZ = 0.0f;
		rightArm10.rotateAngleX = MathHelper.cos(limbSwing * 0.6662f + 3.1415927f) * 2.0f * limbSwingAmount * 0.5f;
		rightArm10.rotateAngleZ = 0.0f;
		rightArm11.rotateAngleX = MathHelper.cos(limbSwing * 0.6662f + 3.1415927f) * 2.0f * limbSwingAmount * 0.5f;
		rightArm11.rotateAngleZ = 0.0f;
		leftArm6.rotateAngleX = MathHelper.cos(limbSwing * 0.6662f) * 2.0f * limbSwingAmount * 0.5f;
		leftArm6.rotateAngleZ = 0.0f;
		leftArm2.rotateAngleX = MathHelper.cos(limbSwing * 0.6662f) * 2.0f * limbSwingAmount * 0.5f;
		leftArm2.rotateAngleZ = 0.0f;
		leftArm7.rotateAngleX = MathHelper.cos(limbSwing * 0.6662f) * 2.0f * limbSwingAmount * 0.5f;
		leftArm7.rotateAngleZ = 0.0f;
		leftArm8.rotateAngleX = MathHelper.cos(limbSwing * 0.6662f) * 2.0f * limbSwingAmount * 0.5f;
		leftArm8.rotateAngleZ = 0.0f;
		leftArm9.rotateAngleX = MathHelper.cos(limbSwing * 0.6662f) * 2.0f * limbSwingAmount * 0.5f;
		leftArm9.rotateAngleZ = 0.0f;
		leftArm10.rotateAngleX = MathHelper.cos(limbSwing * 0.6662f) * 2.0f * limbSwingAmount * 0.5f;
		leftArm10.rotateAngleZ = 0.0f;
		leftArm11.rotateAngleX = MathHelper.cos(limbSwing * 0.6662f) * 2.0f * limbSwingAmount * 0.5f;
		leftArm11.rotateAngleZ = 0.0f;
		leftArm12.rotateAngleX = MathHelper.cos(limbSwing * 0.6662f) * 2.0f * limbSwingAmount * 0.5f;
		leftArm12.rotateAngleZ = 0.0f;
		leftArm13.rotateAngleX = MathHelper.cos(limbSwing * 0.6662f) * 2.0f * limbSwingAmount * 0.5f;
		leftArm13.rotateAngleZ = 0.0f;
		leftArm14.rotateAngleX = MathHelper.cos(limbSwing * 0.6662f) * 2.0f * limbSwingAmount * 0.5f;
		leftArm14.rotateAngleZ = 0.0f;
		leftArm15.rotateAngleX = MathHelper.cos(limbSwing * 0.6662f) * 2.0f * limbSwingAmount * 0.5f;
		leftArm15.rotateAngleZ = 0.0f;
		rightLeg.rotateAngleX = MathHelper.cos(limbSwing * 0.6662f) * 1.4f * limbSwingAmount;
		rightLeg.rotateAngleY = 0.0f;
		leftLeg.rotateAngleX = MathHelper.cos(limbSwing * 0.6662f + 3.1415927f) * 1.4f * limbSwingAmount;
	}
}
