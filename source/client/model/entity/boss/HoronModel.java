package net.tslat.aoa3.client.model.entity.boss;

import com.mojang.blaze3d.matrix.MatrixStack;
import com.mojang.blaze3d.vertex.IVertexBuilder;
import net.minecraft.client.renderer.entity.model.EntityModel;
import net.minecraft.client.renderer.model.ModelRenderer;
import net.minecraft.entity.MobEntity;
import net.minecraft.util.math.MathHelper;

public class HoronModel extends EntityModel<MobEntity> {
	private final ModelRenderer body;
	private final ModelRenderer rightArm;
	private final ModelRenderer leftArm;
	private final ModelRenderer rightLeg;
	private final ModelRenderer leftLeg;
	private final ModelRenderer body2;
	private final ModelRenderer body3;
	private final ModelRenderer leftArm2;
	private final ModelRenderer rightArm2;
	private final ModelRenderer rightArm3;
	private final ModelRenderer rightArm4;
	private final ModelRenderer rightArm5;
	private final ModelRenderer rightArm6;
	private final ModelRenderer rightArm7;
	private final ModelRenderer rightArm8;
	private final ModelRenderer rightArm9;
	private final ModelRenderer leftArm3;
	private final ModelRenderer leftArm4;
	private final ModelRenderer leftArm5;
	private final ModelRenderer rightArm10;
	private final ModelRenderer leftArm6;
	private final ModelRenderer rightArm11;
	private final ModelRenderer head;
	private final ModelRenderer head2;
	private final ModelRenderer head3;
	private final ModelRenderer head4;
	private final ModelRenderer head5;
	private final ModelRenderer head6;
	private final ModelRenderer head7;
	private final ModelRenderer rightArm12;
	private final ModelRenderer rightArm13;
	private final ModelRenderer rightArm14;
	private final ModelRenderer rightArm15;
	private final ModelRenderer leftArm7;
	private final ModelRenderer leftLeg8;
	private final ModelRenderer rightLeg8;

	public HoronModel() {
		textureWidth = 128;
		textureHeight = 64;
		(body = new ModelRenderer(this, 67, 48)).addBox(-8.0f, 0.0f, -3.0f, 14, 8, 8);
		body.setRotationPoint(1.0f, -8.0f, -1.0f);
		body.setTextureSize(128, 64);
		body.mirror = true;
		setRotation(body, 0.0f, 0.0f, 0.0f);
		(rightArm = new ModelRenderer(this, 46, 36)).addBox(-4.0f, -11.0f, 4.0f, 7, 4, 0);
		rightArm.setRotationPoint(-10.0f, -2.0f, 0.0f);
		rightArm.setTextureSize(128, 64);
		rightArm.mirror = true;
		setRotation(rightArm, 0.0f, 0.0f, 0.0f);
		(leftArm = new ModelRenderer(this, 46, 36)).addBox(-2.0f, -11.0f, 4.0f, 7, 4, 0);
		leftArm.setRotationPoint(9.0f, -2.0f, 0.0f);
		leftArm.setTextureSize(128, 64);
		leftArm.mirror = true;
		setRotation(leftArm, 0.0f, 0.0f, 0.0f);
		(rightLeg = new ModelRenderer(this, 67, 31)).addBox(-7.0f, 0.0f, -1.0f, 3, 15, 0);
		rightLeg.setRotationPoint(-4.0f, 9.0f, 0.5f);
		rightLeg.setTextureSize(128, 64);
		rightLeg.mirror = true;
		setRotation(rightLeg, 0.0f, 0.0f, 0.0f);
		(leftLeg = new ModelRenderer(this, 74, 31)).addBox(3.0f, 0.0f, -1.0f, 3, 15, 0);
		leftLeg.setRotationPoint(5.0f, 9.0f, 0.5f);
		leftLeg.setTextureSize(128, 64);
		leftLeg.mirror = true;
		setRotation(leftLeg, 0.0f, 0.0f, 0.0f);
		(body2 = new ModelRenderer(this, 81, 32)).addBox(-3.0f, 0.0f, -3.0f, 6, 8, 6);
		body2.setRotationPoint(0.0f, 7.0f, 0.0f);
		body2.setTextureSize(128, 64);
		body2.mirror = true;
		setRotation(body2, 0.0f, 0.0f, 0.0f);
		(body3 = new ModelRenderer(this, 0, 23)).addBox(-5.0f, 0.0f, -3.0f, 10, 8, 6);
		body3.setRotationPoint(0.0f, -1.0f, 0.0f);
		body3.setTextureSize(128, 64);
		body3.mirror = true;
		setRotation(body3, 0.0f, 0.0f, 0.0f);
		(leftArm2 = new ModelRenderer(this, 26, 38)).addBox(4.0f, 16.0f, -0.5f, 1, 9, 2);
		leftArm2.setRotationPoint(9.0f, -2.0f, 0.0f);
		leftArm2.setTextureSize(128, 64);
		leftArm2.mirror = true;
		setRotation(leftArm2, 0.0f, 0.0f, 0.0f);
		(rightArm2 = new ModelRenderer(this, 27, 58)).addBox(-5.0f, 10.0f, -1.0f, 2, 2, 3);
		rightArm2.setRotationPoint(-11.0f, 1.0f, 0.0f);
		rightArm2.setTextureSize(128, 64);
		rightArm2.mirror = true;
		setRotation(rightArm2, 0.0f, 0.0f, 0.0f);
		(rightArm3 = new ModelRenderer(this, 25, 50)).addBox(-3.0f, 11.0f, 1.0f, 2, 3, 2);
		rightArm3.setRotationPoint(-10.0f, -2.0f, 0.0f);
		rightArm3.setTextureSize(128, 64);
		rightArm3.mirror = true;
		setRotation(rightArm3, 0.0f, 0.0f, 0.0f);
		(rightArm4 = new ModelRenderer(this, 55, 0)).addBox(-5.0f, -17.0f, -2.0f, 2, 2, 2);
		rightArm4.setRotationPoint(-11.0f, 1.0f, 0.0f);
		rightArm4.setTextureSize(128, 64);
		rightArm4.mirror = true;
		setRotation(rightArm4, 0.0f, 0.0f, 0.0f);
		(rightArm5 = new ModelRenderer(this, 23, 56)).addBox(-5.0f, 8.0f, -3.0f, 2, 1, 7);
		rightArm5.setRotationPoint(-11.0f, 1.0f, 0.0f);
		rightArm5.setTextureSize(128, 64);
		rightArm5.mirror = true;
		setRotation(rightArm5, 0.0f, 0.0f, 0.0f);
		(rightArm6 = new ModelRenderer(this, 29, 58)).addBox(-5.0f, 9.0f, -2.0f, 2, 1, 5);
		rightArm6.setRotationPoint(-11.0f, 1.0f, 0.0f);
		rightArm6.setTextureSize(128, 64);
		rightArm6.mirror = true;
		setRotation(rightArm6, 0.0f, 0.0f, 0.0f);
		(rightArm7 = new ModelRenderer(this, 0, 38)).addBox(-5.0f, -9.0f, -4.0f, 2, 17, 9);
		rightArm7.setRotationPoint(-11.0f, 1.0f, 0.0f);
		rightArm7.setTextureSize(128, 64);
		rightArm7.mirror = true;
		setRotation(rightArm7, 0.0f, 0.0f, 0.0f);
		(rightArm8 = new ModelRenderer(this, 55, 0)).addBox(-5.0f, -11.0f, 5.0f, 2, 2, 2);
		rightArm8.setRotationPoint(-11.0f, 1.0f, 0.0f);
		rightArm8.setTextureSize(128, 64);
		rightArm8.mirror = true;
		setRotation(rightArm8, 0.0f, 0.0f, 0.0f);
		(rightArm9 = new ModelRenderer(this, 55, 0)).addBox(-5.0f, -14.0f, 1.5f, 2, 2, 2);
		rightArm9.setRotationPoint(-11.0f, 1.0f, 0.0f);
		rightArm9.setTextureSize(128, 64);
		rightArm9.mirror = true;
		setRotation(rightArm9, 0.0f, 0.0f, 0.0f);
		(leftArm3 = new ModelRenderer(this, 25, 50)).addBox(2.0f, 11.0f, 1.0f, 2, 3, 2);
		leftArm3.setRotationPoint(9.0f, -2.0f, 0.0f);
		leftArm3.setTextureSize(128, 64);
		leftArm3.mirror = true;
		setRotation(leftArm3, 0.0f, 0.0f, 0.0f);
		(leftArm4 = new ModelRenderer(this, 34, 29)).addBox(4.0f, -2.0f, -1.0f, 1, 18, 3);
		leftArm4.setRotationPoint(9.0f, -2.0f, 0.0f);
		leftArm4.setTextureSize(128, 64);
		leftArm4.mirror = true;
		setRotation(leftArm4, 0.0f, 0.0f, 0.0f);
		(leftArm5 = new ModelRenderer(this, 108, 36)).addBox(-1.0f, -2.0f, -2.0f, 5, 13, 5);
		leftArm5.setRotationPoint(9.0f, -2.0f, 0.0f);
		leftArm5.setTextureSize(128, 64);
		leftArm5.mirror = true;
		setRotation(leftArm5, 0.0f, 0.0f, 0.0f);
		(rightArm10 = new ModelRenderer(this, 108, 36)).addBox(-3.0f, -2.0f, -2.0f, 5, 13, 5);
		rightArm10.setRotationPoint(-10.0f, -2.0f, 0.0f);
		rightArm10.setTextureSize(128, 64);
		rightArm10.mirror = true;
		setRotation(rightArm10, 0.0f, 0.0f, 0.0f);
		(leftArm6 = new ModelRenderer(this, 25, 50)).addBox(2.0f, 11.0f, -2.0f, 2, 3, 2);
		leftArm6.setRotationPoint(9.0f, -2.0f, 0.0f);
		leftArm6.setTextureSize(128, 64);
		leftArm6.mirror = true;
		setRotation(leftArm6, 0.0f, 0.0f, 0.0f);
		(rightArm11 = new ModelRenderer(this, 25, 50)).addBox(-3.0f, 11.0f, -2.0f, 2, 3, 2);
		rightArm11.setRotationPoint(-10.0f, -2.0f, 0.0f);
		rightArm11.setTextureSize(128, 64);
		rightArm11.mirror = true;
		setRotation(rightArm11, 0.0f, 0.0f, 0.0f);
		(head = new ModelRenderer(this, 21, 17)).addBox(4.0f, -12.0f, -5.0f, 3, 3, 1);
		head.setRotationPoint(0.0f, -1.0f, -4.0f);
		head.setTextureSize(128, 64);
		head.mirror = true;
		setRotation(head, -0.6108652f, 0.0f, 0.0f);
		(head2 = new ModelRenderer(this, 0, 0)).addBox(-4.0f, -8.0f, -4.0f, 8, 8, 8);
		head2.setRotationPoint(0.0f, -4.0f, -4.0f);
		head2.setTextureSize(128, 64);
		head2.mirror = true;
		setRotation(head2, 0.0f, 0.0f, 0.0f);
		(head3 = new ModelRenderer(this, 21, 17)).addBox(-7.0f, -12.0f, -5.0f, 3, 3, 1);
		head3.setRotationPoint(0.0f, -1.0f, -4.0f);
		head3.setTextureSize(128, 64);
		head3.mirror = true;
		setRotation(head3, -0.6108652f, 0.0f, 0.0f);
		(head4 = new ModelRenderer(this, 34, 17)).addBox(4.0f, -9.0f, -7.0f, 3, 6, 3);
		head4.setRotationPoint(0.0f, -1.0f, -4.0f);
		head4.setTextureSize(128, 64);
		head4.mirror = true;
		setRotation(head4, -0.6108652f, 0.0f, 0.0f);
		(head5 = new ModelRenderer(this, 34, 17)).addBox(-7.0f, -9.0f, -7.0f, 3, 6, 3);
		head5.setRotationPoint(0.0f, -1.0f, -4.0f);
		head5.setTextureSize(128, 64);
		head5.mirror = true;
		setRotation(head5, -0.6108652f, 0.0f, 0.0f);
		(head6 = new ModelRenderer(this, 48, 22)).addBox(4.0f, -15.0f, -7.0f, 3, 6, 1);
		head6.setRotationPoint(0.0f, -1.0f, -4.0f);
		head6.setTextureSize(128, 64);
		head6.mirror = true;
		setRotation(head6, -0.6108652f, 0.0f, 0.0f);
		(head7 = new ModelRenderer(this, 48, 22)).addBox(-7.0f, -15.0f, -7.0f, 3, 6, 1);
		head7.setRotationPoint(0.0f, -1.0f, -4.0f);
		head7.setTextureSize(128, 64);
		head7.mirror = true;
		setRotation(head7, -0.6108652f, 0.0f, 0.0f);
		(rightArm12 = new ModelRenderer(this, 55, 0)).addBox(-5.0f, -17.0f, -4.0f, 2, 8, 2);
		rightArm12.setRotationPoint(-11.0f, 1.0f, 0.0f);
		rightArm12.setTextureSize(128, 64);
		rightArm12.mirror = true;
		setRotation(rightArm12, 0.0f, 0.0f, 0.0f);
		(rightArm13 = new ModelRenderer(this, 55, 0)).addBox(-5.0f, -14.0f, -0.5f, 2, 5, 2);
		rightArm13.setRotationPoint(-11.0f, 1.0f, 0.0f);
		rightArm13.setTextureSize(128, 64);
		rightArm13.mirror = true;
		setRotation(rightArm13, 0.0f, 0.0f, 0.0f);
		(rightArm14 = new ModelRenderer(this, 55, 0)).addBox(-5.0f, -11.0f, 3.0f, 2, 2, 2);
		rightArm14.setRotationPoint(-11.0f, 1.0f, 0.0f);
		rightArm14.setTextureSize(128, 64);
		rightArm14.mirror = true;
		setRotation(rightArm14, 0.0f, 0.0f, 0.0f);
		(rightArm15 = new ModelRenderer(this, 32, 4)).addBox(-4.0f, -7.0f, -3.0f, 7, 5, 7);
		rightArm15.setRotationPoint(-10.0f, -2.0f, 0.0f);
		rightArm15.setTextureSize(128, 64);
		rightArm15.mirror = true;
		setRotation(rightArm15, 0.0f, 0.0f, 0.0f);
		(leftArm7 = new ModelRenderer(this, 32, 4)).addBox(-2.0f, -7.0f, -3.0f, 7, 5, 7);
		leftArm7.setRotationPoint(9.0f, -2.0f, 0.0f);
		leftArm7.setTextureSize(128, 64);
		leftArm7.mirror = true;
		setRotation(leftArm7, 0.0f, 0.0f, 0.0f);
		(leftLeg8 = new ModelRenderer(this, 43, 44)).addBox(-2.0f, 0.0f, -3.0f, 5, 15, 5);
		leftLeg8.setRotationPoint(5.0f, 9.0f, 0.5f);
		leftLeg8.setTextureSize(128, 64);
		leftLeg8.mirror = true;
		setRotation(leftLeg8, 0.0f, 0.0f, 0.0f);
		(rightLeg8 = new ModelRenderer(this, 43, 44)).addBox(-4.0f, 0.0f, -3.0f, 5, 15, 5);
		rightLeg8.setRotationPoint(-4.0f, 9.0f, 0.5f);
		rightLeg8.setTextureSize(128, 64);
		rightLeg8.mirror = true;
		setRotation(rightLeg8, 0.0f, 0.0f, 0.0f);
	}

	@Override
	public void render(MatrixStack matrix, IVertexBuilder buffer, int light, int overlay, float red, float green, float blue, float alpha) {
		body.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		rightArm.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		leftArm.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		rightLeg.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		leftLeg.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		body2.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		body3.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		leftArm2.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		rightArm2.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		rightArm3.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		rightArm4.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		rightArm5.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		rightArm6.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		rightArm7.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		rightArm8.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		rightArm9.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		leftArm3.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		leftArm4.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		leftArm5.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		rightArm10.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		leftArm6.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		rightArm11.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		head.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		head2.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		head3.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		head4.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		head5.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		head6.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		head7.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		rightArm12.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		rightArm13.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		rightArm14.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		rightArm15.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		leftArm7.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		leftLeg8.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		rightLeg8.render(matrix, buffer, light, overlay, red, green, blue, alpha);
	}

	private void setRotation(final ModelRenderer model, final float x, final float y, final float z) {
		model.rotateAngleX = x;
		model.rotateAngleY = y;
		model.rotateAngleZ = z;
	}

	@Override
	public void setRotationAngles(MobEntity entityIn, float limbSwing, float limbSwingAmount, float ageInTicks, float netHeadYaw, float headPitch) {
		head.rotateAngleY = netHeadYaw / (float)(180f / Math.PI);
		head2.rotateAngleY = netHeadYaw / (float)(180f / Math.PI);
		head3.rotateAngleY = netHeadYaw / (float)(180f / Math.PI);
		head4.rotateAngleY = netHeadYaw / (float)(180f / Math.PI);
		head5.rotateAngleY = netHeadYaw / (float)(180f / Math.PI);
		head6.rotateAngleY = netHeadYaw / (float)(180f / Math.PI);
		head7.rotateAngleY = netHeadYaw / (float)(180f / Math.PI);
		rightArm.rotateAngleX = MathHelper.cos(limbSwing * 0.6662f + 3.1415927f) * 2.0f * limbSwingAmount * 0.5f;
		rightArm.rotateAngleZ = 0.0f;
		rightArm2.rotateAngleX = MathHelper.cos(limbSwing * 0.6662f + 3.1415927f) * 2.0f * limbSwingAmount * 0.5f;
		rightArm2.rotateAngleZ = 0.0f;
		rightArm3.rotateAngleX = MathHelper.cos(limbSwing * 0.6662f + 3.1415927f) * 2.0f * limbSwingAmount * 0.5f;
		rightArm3.rotateAngleZ = 0.0f;
		rightArm4.rotateAngleX = MathHelper.cos(limbSwing * 0.6662f + 3.1415927f) * 2.0f * limbSwingAmount * 0.5f;
		rightArm4.rotateAngleZ = 0.0f;
		rightArm5.rotateAngleX = MathHelper.cos(limbSwing * 0.6662f + 3.1415927f) * 2.0f * limbSwingAmount * 0.5f;
		rightArm5.rotateAngleZ = 0.0f;
		rightArm6.rotateAngleX = MathHelper.cos(limbSwing * 0.6662f + 3.1415927f) * 2.0f * limbSwingAmount * 0.5f;
		rightArm6.rotateAngleZ = 0.0f;
		rightArm7.rotateAngleX = MathHelper.cos(limbSwing * 0.6662f + 3.1415927f) * 2.0f * limbSwingAmount * 0.5f;
		rightArm7.rotateAngleZ = 0.0f;
		rightArm8.rotateAngleX = MathHelper.cos(limbSwing * 0.6662f + 3.1415927f) * 2.0f * limbSwingAmount * 0.5f;
		rightArm8.rotateAngleZ = 0.0f;
		rightArm9.rotateAngleX = MathHelper.cos(limbSwing * 0.6662f + 3.1415927f) * 2.0f * limbSwingAmount * 0.5f;
		rightArm9.rotateAngleZ = 0.0f;
		rightArm10.rotateAngleX = MathHelper.cos(limbSwing * 0.6662f + 3.1415927f) * 2.0f * limbSwingAmount * 0.5f;
		rightArm10.rotateAngleZ = 0.0f;
		rightArm11.rotateAngleX = MathHelper.cos(limbSwing * 0.6662f + 3.1415927f) * 2.0f * limbSwingAmount * 0.5f;
		rightArm11.rotateAngleZ = 0.0f;
		rightArm12.rotateAngleX = MathHelper.cos(limbSwing * 0.6662f + 3.1415927f) * 2.0f * limbSwingAmount * 0.5f;
		rightArm12.rotateAngleZ = 0.0f;
		rightArm13.rotateAngleX = MathHelper.cos(limbSwing * 0.6662f + 3.1415927f) * 2.0f * limbSwingAmount * 0.5f;
		rightArm13.rotateAngleZ = 0.0f;
		rightArm14.rotateAngleX = MathHelper.cos(limbSwing * 0.6662f + 3.1415927f) * 2.0f * limbSwingAmount * 0.5f;
		rightArm14.rotateAngleZ = 0.0f;
		rightArm15.rotateAngleX = MathHelper.cos(limbSwing * 0.6662f + 3.1415927f) * 2.0f * limbSwingAmount * 0.5f;
		rightArm15.rotateAngleZ = 0.0f;
		leftArm.rotateAngleX = MathHelper.cos(limbSwing * 0.6662f) * 2.0f * limbSwingAmount * 0.5f;
		leftArm.rotateAngleZ = 0.0f;
		leftArm2.rotateAngleX = MathHelper.cos(limbSwing * 0.6662f) * 2.0f * limbSwingAmount * 0.5f;
		leftArm2.rotateAngleZ = 0.0f;
		leftArm3.rotateAngleX = MathHelper.cos(limbSwing * 0.6662f) * 2.0f * limbSwingAmount * 0.5f;
		leftArm3.rotateAngleZ = 0.0f;
		leftArm4.rotateAngleX = MathHelper.cos(limbSwing * 0.6662f) * 2.0f * limbSwingAmount * 0.5f;
		leftArm4.rotateAngleZ = 0.0f;
		leftArm5.rotateAngleX = MathHelper.cos(limbSwing * 0.6662f) * 2.0f * limbSwingAmount * 0.5f;
		leftArm5.rotateAngleZ = 0.0f;
		leftArm6.rotateAngleX = MathHelper.cos(limbSwing * 0.6662f) * 2.0f * limbSwingAmount * 0.5f;
		leftArm6.rotateAngleZ = 0.0f;
		leftArm7.rotateAngleX = MathHelper.cos(limbSwing * 0.6662f) * 2.0f * limbSwingAmount * 0.5f;
		leftArm7.rotateAngleZ = 0.0f;
		rightLeg.rotateAngleX = MathHelper.cos(limbSwing * 0.6662f) * 1.4f * limbSwingAmount;
		rightLeg.rotateAngleY = 0.0f;
		rightLeg8.rotateAngleX = MathHelper.cos(limbSwing * 0.6662f) * 1.4f * limbSwingAmount;
		rightLeg8.rotateAngleY = 0.0f;
		leftLeg.rotateAngleX = MathHelper.cos(limbSwing * 0.6662f + 3.1415927f) * 1.4f * limbSwingAmount;
		leftLeg8.rotateAngleX = MathHelper.cos(limbSwing * 0.6662f + 3.1415927f) * 1.4f * limbSwingAmount;
	}
}
