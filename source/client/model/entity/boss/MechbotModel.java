package net.tslat.aoa3.client.model.entity.boss;

import com.mojang.blaze3d.matrix.MatrixStack;
import com.mojang.blaze3d.vertex.IVertexBuilder;
import net.minecraft.client.renderer.entity.model.EntityModel;
import net.minecraft.client.renderer.model.ModelRenderer;
import net.minecraft.entity.MobEntity;
import net.minecraft.util.math.MathHelper;

public class MechbotModel extends EntityModel<MobEntity> {
	private final ModelRenderer head;
	private final ModelRenderer body2;
	private final ModelRenderer rightArm;
	private final ModelRenderer leftArm;
	private final ModelRenderer body3;
	private final ModelRenderer body4;
	private final ModelRenderer body5;
	private final ModelRenderer body6;
	private final ModelRenderer leftArm2;
	private final ModelRenderer rightArm2;
	private final ModelRenderer rightLeg3;
	private final ModelRenderer leftLeg3;
	private final ModelRenderer leftLeg2;
	private final ModelRenderer rightLeg2;
	private final ModelRenderer body7;
	private final ModelRenderer body;
	private final ModelRenderer head2;
	private final ModelRenderer head3;
	private final ModelRenderer head4;
	private final ModelRenderer head5;
	private final ModelRenderer head6;
	private final ModelRenderer head7;
	private final ModelRenderer leftLeg;
	private final ModelRenderer rightLeg;
	private final ModelRenderer head8;
	private final ModelRenderer head9;
	private final ModelRenderer head10;
	private final ModelRenderer head11;

	public MechbotModel() {
		texWidth = 64;
		texHeight = 64;
		head = new ModelRenderer(this, 29, 44);
		head.addBox(4.0f, -8.0f, -3.0f, 2, 2, 3);
		head.setPos(0.0f, -6.0f, 0.0f);
		head.setTexSize(64, 64);
		head.mirror = true;
		setRotation(head, 0.0f, 0.0f, 0.0f);
		body2 = new ModelRenderer(this, 0, 33);
		body2.addBox(-6.0f, 14.0f, -4.0f, 12, 2, 8);
		body2.setPos(0.0f, -4.0f, 0.0f);
		body2.setTexSize(64, 64);
		body2.mirror = true;
		setRotation(body2, 0.0f, 0.0f, 0.0f);
		rightArm = new ModelRenderer(this, 33, 6);
		rightArm.addBox(-4.0f, -5.0f, -4.0f, 7, 3, 8);
		rightArm.setPos(-9.0f, -1.0f, 0.0f);
		rightArm.setTexSize(64, 64);
		rightArm.mirror = true;
		setRotation(rightArm, 0.0f, 0.0f, 0.0f);
		leftArm = new ModelRenderer(this, 33, 6);
		leftArm.addBox(-3.0f, -5.0f, -4.0f, 7, 3, 8);
		leftArm.setPos(9.0f, -1.0f, 0.0f);
		leftArm.setTexSize(64, 64);
		leftArm.mirror = true;
		setRotation(leftArm, 0.0f, 0.0f, 0.0f);
		body3 = new ModelRenderer(this, 0, 43);
		body3.addBox(-5.0f, 0.0f, -3.0f, 10, 14, 6);
		body3.setPos(0.0f, -4.0f, 0.0f);
		body3.setTexSize(64, 64);
		body3.mirror = true;
		setRotation(body3, 0.0f, 0.0f, 0.0f);
		body4 = new ModelRenderer(this, 32, 49);
		body4.addBox(5.0f, 7.0f, -4.0f, 1, 7, 8);
		body4.setPos(0.0f, -4.0f, 0.0f);
		body4.setTexSize(64, 64);
		body4.mirror = true;
		setRotation(body4, 0.0f, 0.0f, 0.0f);
		body5 = new ModelRenderer(this, 0, 33);
		body5.addBox(-6.0f, -2.0f, -4.0f, 12, 2, 8);
		body5.setPos(0.0f, -4.0f, 0.0f);
		body5.setTexSize(64, 64);
		body5.mirror = true;
		setRotation(body5, 0.0f, 0.0f, 0.0f);
		body6 = new ModelRenderer(this, 32, 49);
		body6.addBox(-6.0f, 7.0f, -4.0f, 1, 7, 8);
		body6.setPos(0.0f, -4.0f, 0.0f);
		body6.setTexSize(64, 64);
		body6.mirror = true;
		setRotation(body6, 0.0f, 0.0f, 0.0f);
		leftArm2 = new ModelRenderer(this, 40, 24);
		leftArm2.addBox(-2.0f, -2.0f, -3.0f, 6, 15, 6);
		leftArm2.setPos(9.0f, -1.0f, 0.0f);
		leftArm2.setTexSize(64, 64);
		leftArm2.mirror = true;
		setRotation(leftArm2, 0.0f, 0.0f, 0.0f);
		rightArm2 = new ModelRenderer(this, 40, 24);
		rightArm2.addBox(-4.0f, -2.0f, -3.0f, 6, 15, 6);
		rightArm2.setPos(-9.0f, -1.0f, 0.0f);
		rightArm2.setTexSize(64, 64);
		rightArm2.mirror = true;
		setRotation(rightArm2, 0.0f, 0.0f, 0.0f);
		rightLeg3 = new ModelRenderer(this, 24, 25);
		rightLeg3.addBox(-1.0f, 10.0f, -1.0f, 2, 1, 2);
		rightLeg3.setPos(-4.0f, 12.0f, 0.0f);
		rightLeg3.setTexSize(64, 64);
		rightLeg3.mirror = true;
		setRotation(rightLeg3, 0.0f, 0.0f, 0.0f);
		leftLeg3 = new ModelRenderer(this, 24, 25);
		leftLeg3.addBox(-1.0f, 10.0f, -1.0f, 2, 1, 2);
		leftLeg3.setPos(4.0f, 12.0f, 0.0f);
		leftLeg3.setTexSize(64, 64);
		leftLeg3.mirror = true;
		setRotation(leftLeg3, 0.0f, 0.0f, 0.0f);
		leftLeg2 = new ModelRenderer(this, 0, 16);
		leftLeg2.addBox(-3.0f, 0.0f, -3.0f, 6, 10, 6);
		leftLeg2.setPos(4.0f, 12.0f, 0.0f);
		leftLeg2.setTexSize(64, 64);
		leftLeg2.mirror = true;
		setRotation(leftLeg2, 0.0f, 0.0f, 0.0f);
		rightLeg2 = new ModelRenderer(this, 0, 16);
		rightLeg2.addBox(-3.0f, 0.0f, -3.0f, 6, 10, 6);
		rightLeg2.setPos(-4.0f, 12.0f, 0.0f);
		rightLeg2.setTexSize(64, 64);
		rightLeg2.mirror = true;
		setRotation(rightLeg2, 0.0f, 0.0f, 0.0f);
		body7 = new ModelRenderer(this, 32, 49);
		body7.addBox(5.0f, 0.0f, -4.0f, 1, 7, 8);
		body7.setPos(0.0f, -4.0f, 0.0f);
		body7.setTexSize(64, 64);
		body7.mirror = true;
		setRotation(body7, 0.0f, 0.0f, 0.0f);
		body = new ModelRenderer(this, 32, 49);
		body.addBox(-6.0f, 0.0f, -4.0f, 1, 7, 8);
		body.setPos(0.0f, -4.0f, 0.0f);
		body.setTexSize(64, 64);
		body.mirror = true;
		setRotation(body, 0.0f, 0.0f, 0.0f);
		head2 = new ModelRenderer(this, 49, 0);
		head2.addBox(-1.0f, -7.0f, -5.0f, 2, 4, 1);
		head2.setPos(0.0f, -6.0f, 0.0f);
		head2.setTexSize(64, 64);
		head2.mirror = true;
		setRotation(head2, 0.0f, 0.0f, 0.0f);
		head3 = new ModelRenderer(this, 29, 44);
		head3.addBox(-6.0f, -8.0f, -3.0f, 2, 2, 3);
		head3.setPos(0.0f, -6.0f, 0.0f);
		head3.setTexSize(64, 64);
		head3.mirror = true;
		setRotation(head3, 0.0f, 0.0f, 0.0f);
		head4 = new ModelRenderer(this, 46, 45);
		head4.addBox(6.0f, -8.0f, -4.0f, 1, 3, 8);
		head4.setPos(0.0f, -6.0f, 0.0f);
		head4.setTexSize(64, 64);
		head4.mirror = true;
		setRotation(head4, 0.0f, 0.0f, 0.0f);
		head5 = new ModelRenderer(this, 46, 45);
		head5.addBox(-7.0f, -8.0f, -4.0f, 1, 3, 8);
		head5.setPos(0.0f, -6.0f, 0.0f);
		head5.setTexSize(64, 64);
		head5.mirror = true;
		setRotation(head5, 0.0f, 0.0f, 0.0f);
		head6 = new ModelRenderer(this, 8, 33);
		head6.addBox(1.0f, -9.0f, -4.0f, 2, 1, 8);
		head6.setPos(0.0f, -6.0f, 0.0f);
		head6.setTexSize(64, 64);
		head6.mirror = true;
		setRotation(head6, 0.0f, 0.0f, 0.0f);
		head7 = new ModelRenderer(this, 9, 33);
		head7.addBox(4.0f, -3.0f, -5.0f, 1, 2, 8);
		head7.setPos(0.0f, -6.0f, 0.0f);
		head7.setTexSize(64, 64);
		head7.mirror = true;
		setRotation(head7, 0.0f, 0.0f, 0.0f);
		leftLeg = new ModelRenderer(this, 24, 17);
		leftLeg.addBox(-3.0f, 11.0f, -3.0f, 6, 1, 6);
		leftLeg.setPos(4.0f, 12.0f, 0.0f);
		leftLeg.setTexSize(64, 64);
		leftLeg.mirror = true;
		setRotation(leftLeg, 0.0f, 0.0f, 0.0f);
		rightLeg = new ModelRenderer(this, 24, 17);
		rightLeg.addBox(-3.0f, 11.0f, -3.0f, 6, 1, 6);
		rightLeg.setPos(-4.0f, 12.0f, 0.0f);
		rightLeg.setTexSize(64, 64);
		rightLeg.mirror = true;
		setRotation(rightLeg, 0.0f, 0.0f, 0.0f);
		head8 = new ModelRenderer(this, 0, 0);
		head8.addBox(-4.0f, -8.0f, -4.0f, 8, 8, 8);
		head8.setPos(0.0f, -6.0f, 0.0f);
		head8.setTexSize(64, 64);
		head8.mirror = true;
		setRotation(head8, 0.0f, 0.0f, 0.0f);
		head9 = new ModelRenderer(this, 8, 33);
		head9.addBox(-3.0f, -9.0f, -4.0f, 2, 1, 8);
		head9.setPos(0.0f, -6.0f, 0.0f);
		head9.setTexSize(64, 64);
		head9.mirror = true;
		setRotation(head9, 0.0f, 0.0f, 0.0f);
		head10 = new ModelRenderer(this, 26, 0);
		head10.addBox(-4.0f, -3.0f, -5.0f, 8, 3, 1);
		head10.setPos(0.0f, -6.0f, 0.0f);
		head10.setTexSize(64, 64);
		head10.mirror = true;
		setRotation(head10, 0.0f, 0.0f, 0.0f);
		head11 = new ModelRenderer(this, 9, 33);
		head11.addBox(-5.0f, -3.0f, -5.0f, 1, 2, 8);
		head11.setPos(0.0f, -6.0f, 0.0f);
		head11.setTexSize(64, 64);
		head11.mirror = true;
		setRotation(head11, 0.0f, 0.0f, 0.0f);
	}

	@Override
	public void renderToBuffer(MatrixStack matrix, IVertexBuilder buffer, int light, int overlay, float red, float green, float blue, float alpha) {
		head.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		body2.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		rightArm.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		leftArm.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		body3.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		body4.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		body5.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		body6.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		leftArm2.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		rightArm2.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		rightLeg3.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		leftLeg3.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		leftLeg2.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		rightLeg2.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		body7.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		body.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		head2.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		head3.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		head4.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		head5.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		head6.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		head7.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		leftLeg.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		rightLeg.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		head8.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		head9.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		head10.render(matrix, buffer, light, overlay, red, green, blue, alpha);
		head11.render(matrix, buffer, light, overlay, red, green, blue, alpha);
	}

	private void setRotation(ModelRenderer model, float x, float y, float z) {
		model.xRot = x;
		model.yRot = y;
		model.zRot = z;
	}

	@Override
	public void setupAnim(MobEntity entityIn, float limbSwing, float limbSwingAmount, float ageInTicks, float netHeadYaw, float headPitch) {
		head.yRot = netHeadYaw / 57.295776f;
		head.xRot = headPitch / 54.11268f;
		head2.yRot = netHeadYaw / 57.295776f;
		head2.xRot = headPitch / 54.11268f;
		head3.yRot = netHeadYaw / 57.295776f;
		head3.xRot = headPitch / 54.11268f;
		head4.yRot = netHeadYaw / 57.295776f;
		head4.xRot = headPitch / 54.11268f;
		head5.yRot = netHeadYaw / 57.295776f;
		head5.xRot = headPitch / 54.11268f;
		head6.yRot = netHeadYaw / 57.295776f;
		head6.xRot = headPitch / 54.11268f;
		head7.yRot = netHeadYaw / 57.295776f;
		head7.xRot = headPitch / 54.11268f;
		head8.yRot = netHeadYaw / 57.295776f;
		head8.xRot = headPitch / 54.11268f;
		head9.yRot = netHeadYaw / 57.295776f;
		head9.xRot = headPitch / 54.11268f;
		head10.yRot = netHeadYaw / 57.295776f;
		head10.xRot = headPitch / 54.11268f;
		head11.yRot = netHeadYaw / 57.295776f;
		head11.xRot = headPitch / 54.11268f;
		rightArm.xRot = MathHelper.cos((limbSwing * 0.6662f + 3.1415927f)) * 2.0f * limbSwingAmount * 0.5f;
		rightArm.zRot = 0.0f;
		rightArm2.xRot = MathHelper.cos((limbSwing * 0.6662f + 3.1415927f)) * 2.0f * limbSwingAmount * 0.5f;
		rightArm2.zRot = 0.0f;
		leftArm.xRot = MathHelper.cos((limbSwing * 0.6662f)) * 2.0f * limbSwingAmount * 0.5f;
		leftArm.zRot = 0.0f;
		leftArm2.xRot = MathHelper.cos((limbSwing * 0.6662f)) * 2.0f * limbSwingAmount * 0.5f;
		leftArm2.zRot = 0.0f;
		rightLeg.xRot = MathHelper.cos((limbSwing * 0.6662f)) * 1.4f * limbSwingAmount;
		rightLeg.yRot = 0.0f;
		rightLeg2.xRot = MathHelper.cos((limbSwing * 0.6662f)) * 1.4f * limbSwingAmount;
		rightLeg2.yRot = 0.0f;
		rightLeg3.xRot = MathHelper.cos((limbSwing * 0.6662f)) * 1.4f * limbSwingAmount;
		rightLeg3.yRot = 0.0f;
		leftLeg.xRot = MathHelper.cos((limbSwing * 0.6662f + 3.1415927f)) * 1.4f * limbSwingAmount;
		leftLeg2.xRot = MathHelper.cos((limbSwing * 0.6662f + 3.1415927f)) * 1.4f * limbSwingAmount;
		leftLeg3.xRot = MathHelper.cos((limbSwing * 0.6662f + 3.1415927f)) * 1.4f * limbSwingAmount;
	}
}

